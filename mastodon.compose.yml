# must be used as an overlay for the main docker-compose file. Ex
# docker-compose -f docker-compose.yml -f mastodon.castle.yml up

# defaults
# handle: castle_mastodon
# admin: castle@mastodon.castle
# password: password

services:
  mastodon:
    labels:
      - traefik.http.routers.mastodon.rule=Host(`mastodon.castle`)
      - traefik.http.routers.mastodon.tls=true
      - traefik.http.routers.mastodon.tls.certresolver=smallstep
      - traefik.http.services.mastodon-sandcastles.loadBalancer.healthCheck.path=/health
      - traefik.port=2970
      - traefik.enable=true
      - traefik.docker.network=sandcastles_mastodon
    depends_on:
      mastodon_db:
        condition: service_started
      mastodon_redis:
        condition: service_started
      mastodon-init:
        condition: service_completed_successfully
    image: localhost/sandcastles/mastodon:latest
    build:
      dockerfile: ./mastodon.Dockerfile
      target: mastodon
      tags:
        - localhost/sandcastles/mastodon:latest
    command: bundle exec rails server -p 2970 -b 0.0.0.0
#    command: bundle exec puma -C config/puma.rb
#    command: tail -f /dev/null
    volumes: &mastodon_data_web_volume
      - 'mastodon_data_web:/mastodon/public/system:z'
    ports:
      - '2970:2970'
    networks:
      default:
      mastodon:
    environment: &mastodon_env
      LOCAL_DOMAIN: mastodon.castle
      ALTERNATE_DOMAINS: 127.0.0.1:2970
      WEB_DOMAIN: localhost:2970
      DB_HOST: mastodon_db
      DB_USER: mastodon
      DB_NAME: mastodon
      DB_PASS: password
      DB_PORT: 5432
      REDIS_HOST: mastodon_redis
      SECRET_KEY_BASE: 6f8fbd95f1e6b3d15121c6d0c54cae5efebeec70cf4d5c9ee09158a8241ffcb01a9d13b66e95ef8bc5adfc50c20ce9ffb3659b7c09e94449a45dd28582f5a578
      OTP_SECRET: 6163a17e06524facdb86fccb0293b6f6070cc6a493cba9d663451a477503896d3ac3dd300193c4773b5eefe97da22564e6b2a5555b43ced647e35e930d3687ed
      S3_ENABLED: 'false'
      ES_ENABLED: 'false'
      HTTPS_ENABLED: false
      LOCAL_HTTPS: false
      ALLOWED_PRIVATE_ADDRESSES: 127.0.0.1,172.0.0.0/8,192.0.0.0/8
      RAILS_ENV: production
      ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: fkSxKD2bF396kdQbrP1EJ7WbU7ZgNokR
      ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: r0hvVmzBVsjxC7AMlwhOzmtc36ZCOS1E
      ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: PhdFyyfy5xJ7WVd2lWBpcPScRQHzRTNr
#    restart: on-failure
    healthcheck:
      test: ['CMD-SHELL',"curl -s --noproxy localhost localhost:2970/health | grep -q 'OK' || exit 1"]
      interval: 5s
      timeout: 1s
      retries: 10
  
  mastodon-init:
    image: ghcr.io/mastodon/mastodon:v4.3.4
    command: /opt/mastodon/init.sh
    volumes:
      - './volumes/mastodon/init.sh:/opt/mastodon/init.sh:ro'
      - 'mastodon_data_web:/mastodon/public/system:z'
    networks:
      - mastodon
    environment:
      <<: *mastodon_env
      RAILS_ENVIRONMENT: production
      FORCE_INIT: 'false'
  
  mastodon-streaming:
    scale: 0
    depends_on:
      mastodon:
        condition: service_healthy
    build:
      dockerfile: mastodon.Dockerfile
      target: mastodon-streaming
      tags:
        - localhost/sandcastles/mastodon:latest
    image: localhost/sandcastles/mastodon-streaming:latest
    command: node ./streaming/index.js
    networks:
      - mastodon
    environment: 
      <<: *mastodon_env
      MASTODON_MODE: streaming
    restart: on-failure
  
  mastodon-sidekiq:
    depends_on:
      mastodon:
        condition: service_healthy
    image: localhost/sandcastles/mastodon:latest
    build:
      dockerfile: mastodon.Dockerfile
      target: mastodon
      tags:
        - localhost/sandcastles/mastodon:latest
    command: bundle exec sidekiq
    volumes: *mastodon_data_web_volume
    networks:
      - default
      - mastodon
    environment:
      <<: *mastodon_env
      MASTODON_MODE: sidekiq
    restart: on-failure

  mastodon_db:
    image: docker.io/postgres:16-alpine
    command:
      - postgres
      - -c
      - config_file=/etc/postgresql/postgresql.conf
    environment:
      POSTGRES_DB: mastodon
      POSTGRES_PASSWORD: password
      POSTGRES_USER: mastodon
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    networks:
      - mastodon
    volumes:
      - mastodon_data_db:/var/lib/postgresql/data
      - ./volumes/postgresql.conf:/etc/postgresql/postgresql.conf:z

  mastodon_redis:
    image: docker.io/redis:7.4-alpine
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - 'mastodon_data_redis:/data'
    networks:
      - mastodon
    restart: 'no'

  proxy:
    networks:
      default:
        aliases:
          - mastodon.castle
      mastodon: {}

volumes:
  mastodon_data_db:
    driver: local
  mastodon_data_redis:
    driver: local
  mastodon_data_web:
    driver: local

networks:
  mastodon:
  default:
